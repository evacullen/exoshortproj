import numpy as np
import matplotlib.pyplot as plt

times_text = """
Times: 2460744.42697611 2460744.42716597 2460744.42735613 2460744.42754617
 2460744.42773636 2460744.42792655 2460744.42811682 2460744.42830703
 2460744.4284972  2460744.42868733 2460744.4288775  2460744.42906893
 2460744.42926025 2460744.42945143 2460744.42964267 2460744.42983398
 2460744.4300241  2460744.43021431 2460744.43040446 2460744.4305946
 2460744.43078479 2460744.43097496 2460744.43116519 2460744.43135538
 2460744.43154557 2460744.43173577 2460744.43192594 2460744.43211611
 2460744.43230627 2460744.43249649 2460744.43268672 2460744.43287687
 2460744.43306704 2460744.43325722 2460744.43344739 2460744.43363758
 2460744.43382778 2460744.43401794 2460744.4342081  2460744.43439839
 2460744.43458857 2460744.43477878 2460744.43496856 2460744.43515879
 2460744.43534858 2460744.43553831 2460744.43572795 2460744.43591818
 2460744.43610836 2460744.43648878 2460744.43667896 2460744.43686919
 2460744.43705937 2460744.43724954 2460744.43743976 2460744.43762991
 2460744.43782011 2460744.43801029 2460744.43820045 2460744.43839062
 2460744.43858081 2460744.43877101 2460744.4389612  2460744.43915134
 2460744.4393415  2460744.43953174 2460744.43972192 2460744.43991209
 2460744.44010222 2460744.44029242 2460744.44048258 2460744.44067274
 2460744.44086263 2460744.44105234 2460744.44124254 2460744.44143271
 2460744.44162283 2460744.44181301 2460744.4420032  2460744.44219341
 2460744.44238357 2460744.44257373 2460744.44276388 2460744.44295406
 2460744.44314421 2460744.44333438 2460744.44352457 2460744.44371477
 2460744.44390497 2460744.44409515 2460744.44428532 2460744.44447555
 2460744.44466577 2460744.44485598 2460744.44504612 2460744.44523632
 2460744.44542671 2460744.44561686 2460744.44580703 2460744.44599724
 2460744.44618743 2460744.44637758 2460744.44656786 2460744.44675811
 2460744.44694828 2460744.44713848 2460744.44732864 2460744.44751888
 2460744.4477086  2460744.44789832 2460744.44808847 2460744.44827856
 2460744.44846869 2460744.44865843 2460744.44884857 2460744.44903874
 2460744.44922842 2460744.44941853 2460744.44960867 2460744.44979879
 2460744.44998893 2460744.45017912 2460744.45036929 2460744.45055944
 2460744.45074958 2460744.45093978 2460744.45113    2460744.45132017
 2460744.45151026 2460744.45170044 2460744.45189062 2460744.45208076
 2460744.45227097 2460744.45246102 2460744.45265121 2460744.45284137
 2460744.45303156 2460744.45322173 2460744.45341192 2460744.4536021
 2460744.45379221 2460744.4539824  2460744.45417254 2460744.45436272
 2460744.4545529  2460744.45474301 2460744.4549332  2460744.4551234
 2460744.45531357 2460744.45550374 2460744.45569393 2460744.45588408
 2460744.45607425 2460744.45626442 2460744.45645455 2460744.4566447
 2460744.45683488 2460744.45702516 2460744.45721532 2460744.45740548
 2460744.45759565 2460744.45778585 2460744.45797605 2460744.45816627
 2460744.45835644 2460744.45854669 2460744.45873691 2460744.4589271
 2460744.45911734 2460744.45930753 2460744.45949785 2460744.45968926
 2460744.45987944 2460744.46006965 2460744.46025981 2460744.46044997
 2460744.46064012 2460744.46083146 2460744.46102279 2460744.46121259
 2460744.46140278 2460744.46159297 2460744.46178315 2460744.46197327
 2460744.46216469 2460744.46235487 2460744.46254501 2460744.46273519
 2460744.46292517 2460744.46311537 2460744.46330555 2460744.46349569
 2460744.46368583 2460744.46387603 2460744.46406618 2460744.46425637
 2460744.46444648 2460744.46463665 2460744.46482708 2460744.46501714
 2460744.46520732 2460744.46539749 2460744.46558768 2460744.46577783
 2460744.46596802 2460744.46615819 2460744.46634843 2460744.46653859
 2460744.46672882 2460744.46691899 2460744.46710887 2460744.46729913
 2460744.46748927 2460744.46767942 2460744.46786965 2460744.46805979
 2460744.46824977 2460744.46843989 2460744.46863009 2460744.46882024
 2460744.46901042 2460744.46920061 2460744.46939076 2460744.46958092
 2460744.46977105 2460744.46996119 2460744.4701514  2460744.47034158
 2460744.4705318  2460744.470722   2460744.47091219 2460744.4711023
 2460744.47129243 2460744.47148193 2460744.47167209 2460744.47186223
 2460744.47205194 2460744.47224198 2460744.47243216 2460744.47262232
 2460744.47281251 2460744.47300262 2460744.47319278 2460744.47338297
 2460744.47357315 2460744.47376333 2460744.47395352 2460744.47414368
 2460744.47433383 2460744.47452413 2460744.47471426 2460744.47490453
 2460744.47509467 2460744.47528485 2460744.47547504 2460744.47566524
 2460744.47585544 2460744.47604559 2460744.47623598 2460744.47642617
 2460744.47661635 2460744.47680647 2460744.47699664 2460744.47718684
 2460744.47737703 2460744.47756721 2460744.4777574  2460744.4779476
 2460744.47813778 2460744.47832792 2460744.478518   2460744.47870818
 2460744.4788983  2460744.47908848 2460744.47927865 2460744.47946871
 2460744.47965887 2460744.47984904 2460744.48003918 2460744.48022937
"""

fluxes_text = """
Fluxes: 1.16761921e-02  4.78884973e-03 -4.90197296e-03  3.31585988e-02
  5.80431693e-02 -2.31374297e-01  4.63702988e-01 -3.93999242e-01
  1.23127382e+00  2.19717977e-01  1.43946618e+00 -8.19517785e-01
  1.68799146e+00 -3.23401553e+00  2.99359792e-01 -1.37338206e+00
  1.64719575e-01  3.82854671e-01 -2.82463523e-01 -5.36643157e-01
 -8.63545331e-01 -1.12670228e+00 -4.34362737e-01 -7.23255458e-01
  1.48145824e-01  1.25767272e+00 -6.67940385e-02  6.58604809e+00
 -3.75510863e-01 -1.88953422e-01 -5.47944302e+00  1.62908001e-01
  2.28629226e-01  1.41072392e+00 -9.90723093e-02 -2.00715173e+00
  3.57290309e+00 -2.15196635e-02 -2.79630119e-01 -4.51919636e-02
  9.44554645e-02 -2.47584687e-01  4.75572592e-01  2.37710874e-01
 -7.97874722e-01  1.57548551e+00 -3.99626107e-02  4.32322738e-01
  1.19277487e+00 -1.29549535e-01 -1.77357962e-01 -4.33784280e-01
 -2.07098234e+00 -8.54378945e-01 -1.98423153e+00 -8.31693512e+00
 -1.07534623e-01 -9.64626795e-02  3.12564939e-01  6.82896869e-01
 -2.71082041e+00  5.46840879e-01  7.10799918e-01  9.72119530e-01
  1.10506272e-01 -1.77435900e-01  1.92754335e+00  7.08774915e+00
  8.86083615e-01  1.41583029e-01  1.62496313e+00  6.13196422e-01
 -1.55602871e+00  2.08941666e-01 -2.25523914e-02 -6.52035573e-01
 -1.26390400e+00 -1.19103916e+00 -3.28010967e+01  4.66883084e+00
 -1.19140730e+00  8.92648605e-01 -1.98916778e+00  4.43017323e+00
  2.68195216e-01  1.63853981e+00  6.46844635e-01  9.38439386e-01
  1.27971431e+00  9.11943711e+00  4.06814801e-01  5.75075925e-01
  9.45379692e-01 -2.53981430e+00  2.41559598e-01  1.39249719e+01
  1.39190220e-01  7.71357323e-01 -5.19945395e-01 -8.41296068e-03
  2.84004373e-01 -2.55809256e-03 -9.08945563e-01 -3.08004718e+00
 -8.09583738e-01  1.03972257e-01  1.55571837e-01  3.59098157e+01
 -2.35782073e-01 -2.46450076e+01  4.78106598e-01  9.04919766e-01
 -2.88876356e-01  7.42748387e-01  1.14601310e+00  1.18077328e+00
  1.87571139e+00  6.42706013e+00  6.53964148e-01  2.80751108e-01
  2.10576947e-01  2.69508148e-01 -8.77307914e-02 -2.18906590e+00
  2.06510189e-01 -4.61721564e-01 -9.86259938e-01 -3.41380382e-01
  9.79051194e-01 -8.59071264e-01 -1.20778658e+00 -2.56115312e-01
  2.46593155e-01 -2.99436960e+00 -1.14570940e+00  1.34190755e+00
  1.97906527e-01  2.06725560e+00  4.09352079e-01  4.09349248e-01
  1.48344759e+00  8.99965023e-01  6.00086388e-01  4.94378800e+00
 -5.42572573e-01  5.96240069e-02  2.58338569e-01  9.17811633e-01
 -1.72885410e-01 -1.07878910e+00 -5.35391730e-01 -1.06520537e+00
 -2.35216109e-01 -1.75894782e-01  1.30168531e+00 -1.27399100e-01
  7.00015361e-01 -7.26708867e-01 -1.13877951e+00  4.24476748e-02
 -1.51120531e-02  1.58613411e-01 -4.79013258e-01 -9.18119488e-03
  3.66213313e-01  1.72727830e-01  4.33078688e+00 -1.15502570e+02
 -6.07168338e-01 -2.66585718e+00  5.48111295e-01 -4.69533195e-01
 -2.14689760e+00 -2.41340248e-01  2.02524032e+00 -2.84627222e-01
  1.50044001e+00 -5.20733890e-01 -2.15613700e+00 -1.89459253e-01
 -5.31749934e-01 -8.52611127e-01 -6.85405897e-02  1.33116870e-01
 -2.33738987e+00  4.76112713e-02 -2.83981345e-01 -6.94089456e+00
 -1.84187069e-01 -3.03734847e-02  2.93591426e-01 -1.01318487e-01
 -5.22351922e-01  5.67726053e-02  6.03092712e-03  3.04305614e-01
  4.99045482e-01 -3.35915989e-01  5.05679815e-01 -1.23669181e+00
 -2.42323907e+00 -6.89919266e-01 -1.81502931e-01  2.59219212e-01
 -6.90197975e+00 -5.64567313e-01 -4.90316042e+00 -2.84018927e+00
  2.19126024e+00 -1.04731105e-01 -5.94027078e-01  2.81909449e-01
  4.97830311e-01 -4.70045640e+00 -6.12670884e-01  5.43693952e+00
  6.39576520e-01 -2.85935946e+00 -2.09311201e-01  1.16910148e+00
  4.64493839e-01  6.10289904e-01 -1.05715996e+01 -4.53832746e-01
  4.67585035e+00 -1.39973733e-02  9.49793101e-01 -9.84411850e-02
 -5.59820102e-01 -5.48737639e-01  1.51240972e-01 -6.60942067e-01
 -2.84476324e+00 -2.90584595e-01 -2.52188144e-01  3.80526105e-02
  1.97218385e-01  4.51203975e-01 -6.70900444e+01 -1.03355563e-01
  7.27519975e-01  5.15727267e-01  2.39252819e-01  5.82003956e-01
  7.76179776e-01 -3.45980388e+00  1.01546011e+01 -4.82213355e-02
  1.84012485e-01 -4.07371961e-02 -4.34951350e-01 -1.64256115e+01
 -1.01607746e+00 -9.35421169e-01  7.86885586e-02 -1.06585338e+01
 -2.82121052e+00 -2.26966588e-01  7.94438423e-01  9.60297512e-02
 -4.81084869e-02 -3.01539649e-01 -3.21309637e-01 -7.48755948e-01
 -6.20849813e+00  2.55445900e-01 -7.10097893e-01  6.15566902e-01
  4.01897677e-01  2.02656511e-01 -4.58818704e-02  1.67267709e+00
 -1.25606763e+00  1.01696827e-01  1.57689999e-01  4.19039064e+00
  1.93923218e+00  2.45375315e+00 -4.89694070e-01 -9.40672642e-02
"""
import numpy as np
import re

binned_text = """
Avg Flux per 0.02h:
  Hour 0.01: 0.0206
  Hour 0.03: 0.2674
  Hour 0.05: -0.1413
  Hour 0.07: -0.1316
  Hour 0.09: -0.7023
  Hour 0.11: 0.0363
  Hour 0.13: 0.1355
  Hour 0.15: -0.0608
  Hour 0.17: 0.8066
  Hour 0.19: 0.1400
  Hour 0.21: 0.4725
  Hour 0.23: -0.2469
  Hour 0.25: -3.3066
  Hour 0.27: -0.3839
  Hour 0.29: 0.5851
  Hour 0.31: 1.9731
  Hour 0.33: 0.2228
  Hour 0.35: -0.7824
  Hour 0.37: -6.0840
  Hour 0.39: 1.7459
  Hour 0.41: 2.4639
  Hour 0.43: 3.1430
  Hour 0.45: 0.0955
  Hour 0.47: -0.9034
  Hour 0.49: 8.9834
  Hour 0.51: -5.8877
  Hour 0.53: 2.2745
  Hour 0.55: 0.3537
  Hour 0.57: -0.7037
  Hour 0.59: -0.3573
  Hour 0.61: -1.0374
  Hour 0.63: 0.8852
  Hour 0.65: 1.9818
  Hour 0.67: 0.1733
  Hour 0.69: -0.6175
  Hour 0.71: 0.4246
  Hour 0.73: -0.3359
  Hour 0.75: 0.0127
  Hour 0.77: -28.6112
  Hour 0.79: -0.0569
  Hour 0.81: -0.3653
  Hour 0.83: -0.3018
  Hour 0.85: -2.3787
  Hour 0.87: -0.0056
  Hour 0.89: 0.0688
  Hour 0.91: -0.8725
  Hour 0.93: -1.8785
  Hour 0.95: -1.2443
  Hour 0.97: -1.1287
  Hour 0.99: 0.4790
  Hour 1.01: -2.0819
  Hour 1.03: 1.2895
  Hour 1.05: -0.3433
  Hour 1.07: -0.8374
  Hour 1.09: -16.6362
  Hour 1.11: 0.5681
  Hour 1.13: 1.7076
  Hour 1.15: -3.7706
  Hour 1.17: -3.4070
  Hour 1.19: 0.1352
  Hour 1.21: -1.5466
  Hour 1.23: 0.2936
  Hour 1.25: 0.9733
  Hour 1.27: 0.9523
"""
lines = binned_text.strip().split('\n')

hour_vals = []
flux_vals = []
pattern = re.compile(r'^Hour\s+([\d.]+):\s+([\-0-9.]+)$')

for line in lines:
    line = line.strip()
    if line.startswith("Avg Flux per"):
        continue
    
    match = pattern.match(line)
    if match:
        hour_str = match.group(1) 
        flux_str = match.group(2)  
        
        hour_vals.append(float(hour_str))
        flux_vals.append(float(flux_str))

hour_array = np.array(hour_vals)
flux_array = np.array(flux_vals)


times_text_clean = times_text.replace("Times:", "").strip()
fluxes_text_clean = fluxes_text.replace("Fluxes:", "").strip()

time_bjd = np.fromstring(times_text_clean, sep=' ')
flux_rel = np.fromstring(fluxes_text_clean, sep=' ')

print("Times array shape:", time_bjd.shape)
print("Fluxes array shape:", flux_rel.shape)
print("First few times =", time_bjd[:5])
print("First few fluxes =", flux_rel[:5])

# use time_bjd and flux_rel as the transit data
time = time_bjd.copy()
flux = flux_rel.copy()

mask_valid = np.isfinite(time) & np.isfinite(flux)
time = time[mask_valid]
flux = flux[mask_valid]

# compute median and standard deviation for outlier clipping
median_flux = np.median(flux)
std_flux = np.std(flux)
# clip values that deviate by more than 3 sigma
outlier_mask = np.abs(flux - median_flux) > 3 * std_flux
inlier_mask = ~outlier_mask
time_clean = time[inlier_mask]
flux_clean = flux[inlier_mask]

print("Number of inliers =", len(flux_clean))
print("Number of outliers =", np.sum(outlier_mask))
print("flux_clean min, max =", flux_clean.min(), flux_clean.max())

# here we assume the highest flux values represent the baseline.
if flux_clean.size > 0:
    baseline_guess = np.nanmedian(np.sort(flux_clean)[-max(1, int(0.05*len(flux_clean))) :])
else:
    baseline_guess = 1.0

# identify OOT points as those with flux >= 0.99*baseline_guess
OOT_mask = flux_clean >= 0.99 * baseline_guess
OOT_flux = flux_clean[OOT_mask]
OOT_time = time_clean[OOT_mask]

if len(OOT_flux) >= 3:
    baseline_level = np.nanmedian(OOT_flux)
else:
    print("Not enough out-of-transit points. Assuming baseline = 1.")
    baseline_level = 1.0

print("Assumed baseline level =", baseline_level)

# normalize flux by the assumed baseline level
norm_flux = flux_clean / baseline_level

if norm_flux.size > 0:
    min_flux_val = np.nanmin(norm_flux)
    transit_depth_percent = (1.0 - min_flux_val) * 100.0
    min_index = int(np.nanargmin(norm_flux))
    observed_mid_time = time_clean[min_index]
else:
    min_flux_val = np.nan
    transit_depth_percent = np.nan
    observed_mid_time = np.nan

# identify in-transit points as those with normalized flux < 0.99
in_transit_mask = norm_flux < 0.99
if np.any(in_transit_mask):
    t_ingress = time_clean[np.where(in_transit_mask)[0][0]]
    t_egress = time_clean[np.where(in_transit_mask)[0][-1]]
    transit_duration_days = t_egress - t_ingress
else:
    transit_duration_days = time_clean[-1] - time_clean[0]
transit_duration_minutes = transit_duration_days * 24 * 60

print(f"Transit depth: {transit_depth_percent:.2f}%")
print(f"Transit duration: {transit_duration_minutes:.1f} minutes")
print(f"Observed mid-transit time: {observed_mid_time:.6f} BJD")

#raw light curve
plt.figure(figsize=(8, 4))
plt.plot(time_clean, norm_flux, '.', color='gray', label='Normalized flux')
if np.any(in_transit_mask):
    plt.axvline(t_ingress, color='blue', linestyle='--', label='Transit start')
    plt.axvline(t_egress, color='blue', linestyle='--', label='Transit end')
plt.axvline(observed_mid_time, color='red', linestyle='-', label='Mid-transit')
plt.xlabel("Time (BJD)")
plt.ylabel("Normalized Flux")
plt.title("Raw Light Curve")
plt.legend(loc='best')
plt.tight_layout()
plt.show()

# binned light curve
bin_width_days = 0.005  # 7.2 minutes ish
bins = np.arange(time_clean.min(), time_clean.max() + bin_width_days, bin_width_days)
binned_time = []
binned_flux = []
for i in range(len(bins) - 1):
    mask_bin = (time_clean >= bins[i]) & (time_clean < bins[i+1])
    if np.sum(mask_bin) > 0:
        binned_time.append(np.mean(time_clean[mask_bin]))
        binned_flux.append(np.nanmedian(norm_flux[mask_bin]))
binned_time = np.array(binned_time)
binned_flux = np.array(binned_flux)

plt.figure(figsize=(8, 4))
plt.scatter(time_clean, norm_flux, s=15, color='gray', label='Data')
plt.plot(binned_time, binned_flux, '-o', color='blue', label='Binned')
plt.axhline(0, color='black', linestyle='--', label='Baseline')
plt.xlabel("Time (BJD)")
plt.ylabel("Normalized Flux")
plt.title("Binned Light Curve")
plt.legend(loc='best')
plt.tight_layout()
plt.show()

# histogram of normalized flux
plt.figure(figsize=(6, 4))
if norm_flux.size > 0:
    counts, bin_edges = np.histogram(norm_flux, bins=30)
    plt.hist(norm_flux, bins=30, color='blue', edgecolor='black')
    plt.xlabel("Normalized Flux")
    plt.ylabel("Counts")
    plt.title("Flux Distribution")
else:
    plt.text(0.5, 0.5, "No flux data available", ha='center', transform=plt.gca().transAxes)
plt.tight_layout()
plt.show()

# phase-folded light curve
published_T0 = observed_mid_time 
period_days = 1.4404          
phase = ((time_clean - published_T0) / period_days) % 1
phase[phase > 0.5] -= 1.0
# Bin the phase-folded data
num_phase_bins = 20
phase_bin_edges = np.linspace(-0.5, 0.5, num_phase_bins + 1)
phase_binned = []
flux_phase_binned = []
# sort phase and flux by phase for binning
sort_idx = np.argsort(phase)
phase_sorted = phase[sort_idx]
flux_sorted = norm_flux[sort_idx]
for i in range(num_phase_bins):
    mask_p = (phase_sorted >= phase_bin_edges[i]) & (phase_sorted < phase_bin_edges[i+1])
    if np.any(mask_p):
        phase_binned.append((phase_bin_edges[i] + phase_bin_edges[i+1]) / 2)
        flux_phase_binned.append(np.nanmedian(flux_sorted[mask_p]))
phase_binned = np.array(phase_binned)
flux_phase_binned = np.array(flux_phase_binned)

plt.figure(figsize=(8, 4))
plt.scatter(phase, norm_flux, s=10, color='gray', label='Raw data')
plt.plot(phase_binned, flux_phase_binned, '-o', color='blue', label='Binned')
plt.axvline(0, color='red', linestyle='--', label='Mid-transit (phase=0)')
plt.xlabel("Orbital Phase")
plt.ylabel("Normalized Flux")
plt.title("Phase-folded Light Curve")
plt.legend(loc='best')
plt.tight_layout()
plt.show()